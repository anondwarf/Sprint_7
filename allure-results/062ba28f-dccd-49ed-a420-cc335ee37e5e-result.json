{"name": "Проверка авторизации курьера", "status": "failed", "statusDetails": {"message": "AssertionError: assert 404 == 200\n +  where 404 = <Response [404]>.status_code", "trace": "self = <allure_commons._allure.fixture object at 0x000001F443B90E10>, args = (), kwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        self.parameters = func_parameters(self._fixture_function, *args, **kwargs)\n    \n        with self:\n>           return self._fixture_function(*args, **kwargs)\n\n.venv\\Lib\\site-packages\\allure_commons\\_allure.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <SubRequest 'registered_courier' for <Function test_login_courier[Absence login]>>\n\n    @allure.step(title=\"Регистрация нового курьера\")\n    @pytest.fixture(scope=\"class\")\n    def registered_courier(request) -> dict[str, str]:\n        login = random_string()\n        password = random_string()\n    \n        payload = {\n            \"login\": login,\n            \"password\": password,\n        }\n    \n        response_create = requests.post(\n            url=f\"{os.getenv('BASE_URL')}{ApiEndPoints.CREATE_COURIER.value}\",\n            data=payload,\n        )\n    \n        assert response_create.status_code == 201\n    \n        response_auth = requests.post(\n            url=f\"{os.getenv('BASE_URL')}{ApiEndPoints.LOGIN_COURIER.value}\",\n            data=payload,\n        )\n    \n        assert response_auth.status_code == 200\n    \n        user_id = response_auth.json()[\"id\"]\n    \n        match request.param:\n            case \"login\":\n                yield {\"password\": password}\n            case \"password\":\n                yield {\"login\": login}\n            case _:\n                yield payload\n    \n        params = {\n            \"id\": user_id,\n        }\n    \n        response_delete = requests.delete(\n            url=f\"{os.getenv('BASE_URL')}{ApiEndPoints.DELETE_COURIER.value}\",\n            params=f\"{params}\",\n        )\n    \n>       assert response_delete.status_code == 200\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\nfixtures\\registered_courier.py:55: AssertionError"}, "parameters": [{"name": "registered_courier", "value": "'login'"}, {"name": "status_code", "value": "400"}, {"name": "response_text", "value": "{'code': 400, 'message': 'Недостаточно данных для входа'}"}], "start": 1736670105324, "stop": 1736670105499, "uuid": "0272cfef-06a9-449f-8c54-99a1ee2f7631", "historyId": "1c82ee7cec686043ad9201646059fcf4", "testCaseId": "43379f67c127106016bab83f2e020344", "fullName": "tests.test_login_courier.TestLoginCourier#test_login_courier", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login_courier"}, {"name": "subSuite", "value": "TestLoginCourier"}, {"name": "host", "value": "home"}, {"name": "thread", "value": "36228-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login_courier"}]}